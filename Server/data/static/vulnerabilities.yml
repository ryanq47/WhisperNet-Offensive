- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: US
      title: 'Eternal Blue [EXAMPLE]'
      description: >-
        <p>EternalBlue (MS17-010) is a critical vulnerability in Microsoft's
        Server Message Block (SMB) protocol, which allows remote code execution
        on Windows systems. Discovered in 2017 and allegedly developed by the
        NSA, EternalBlue exploits a flaw in SMBv1, enabling attackers to gain
        unauthorized access to vulnerable machines.</p><p>By leveraging this
        exploit, attackers can execute arbitrary code on the target system with
        high privileges, potentially leading to complete system compromise. The
        vulnerability became infamous for its role in the rapid spread of
        ransomware attacks such as WannaCry and NotPetya, which caused
        widespread damage to organizations worldwide.</p><p>Affected systems
        include unpatched versions of Windows operating systems, such as Windows
        XP, Windows 7, Windows Server 2003, and Windows Server 2008.
        EternalBlue's impact is severe due to its ability to spread laterally
        across networks, making it possible for attackers to quickly infiltrate
        and propagate through unprotected environments.</p>
      observation: >-
        <p>During the penetration test, the EternalBlue vulnerability (MS17-010)
        was identified on several hosts within the target network. The
        vulnerability was exploited to gain unauthorized access, resulting in
        full control of the affected systems.<br></p><img class="custom-image"
        src="66f21ca2034e3c78f38b55e8" alt="Screenshot 2024-09-22
        091357.png"><p>&nbsp;</p><p><br><br>Testing was conducted using the
        Metasploit Framework, and successful exploitation resulted in remote
        code execution, demonstrating that the EternalBlue vulnerability could
        be used to gain SYSTEM-level access on these machines. Post-exploitation
        activities revealed that sensitive files and credentials were
        accessible, confirming the potential for data
        compromise.</p><p>Screenshots and logs from the exploitation process
        have been included as evidence.</p>
      remediation: >-
        <p>To mitigate the EternalBlue (MS17-010) vulnerability, the following
        steps should be taken:</p><p>1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <strong>Apply Patches:</strong></p><p>o&nbsp;&nbsp; Immediately apply
        the MS17-010 security update provided by Microsoft to all vulnerable
        systems. This patch is available for supported and some unsupported
        Windows versions, including Windows XP, Windows Server 2003, Windows 7,
        and Windows Server 2008.</p><p>o&nbsp;&nbsp; Regularly update systems
        with the latest security patches to prevent future
        exploitation.</p><p>2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Disable
        SMBv1:</strong></p><p>Â·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        Disable SMBv1 on all systems, as it is an outdated protocol prone to
        exploitation. Use SMBv2 or SMBv3 instead, which are more secure. For
        Windows systems, you can disable SMBv1 using
        PowerShell:</p><p>Disable-WindowsOptionalFeature -Online -FeatureName
        SMB1Protocol</p><p>3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Network
        Segmentation:</strong></p><p>o&nbsp;&nbsp; Implement proper network
        segmentation to isolate critical systems and limit lateral movement
        within the network. Restrict communication on port 445 (SMB) to trusted
        systems only.</p><p>4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Enable
        Host-Based Firewalls:</strong></p><p>o&nbsp;&nbsp; Configure host-based
        firewalls to block inbound traffic on port 445 (SMB) unless explicitly
        required. This can significantly reduce the attack
        surface.</p><p>5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Implement
        Network Monitoring:</strong></p><p>o&nbsp;&nbsp; Monitor network traffic
        for unusual activity, especially on ports associated with SMB (port
        445), and set up alerts for any potential exploitation
        attempts.</p><p>o&nbsp;&nbsp; Deploy Intrusion Detection Systems (IDS)
        or Intrusion Prevention Systems (IPS) to identify and block malicious
        activity related to EternalBlue.</p><p>6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <strong>Access Control:</strong></p><p>o&nbsp;&nbsp; Limit
        administrative privileges to minimize the impact of potential exploits.
        Ensure that users only have the necessary permissions for their
        roles.</p><p>o&nbsp;&nbsp; Disable unnecessary services and protocols on
        all systems.</p><p>7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Regular
        Vulnerability Scanning:</strong></p><p>o&nbsp;&nbsp; Conduct regular
        vulnerability assessments to identify and remediate any unpatched or
        misconfigured systems in the
        network.</p><p>8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>Backup and
        Disaster Recovery Plan:</strong></p><p>o&nbsp;&nbsp; Maintain regular,
        offline backups of critical data to ensure recovery in the event of an
        attack. Test backups frequently to ensure their integrity.</p>
      references:
        - 'https://technet.microsoft.com/en-us/library/security/ms17-010.aspx'
        - 'https://nvd.nist.gov/vuln/detail/CVE-2017-0144'
        - >-
          https://docs.microsoft.com/en-us/windows/security/threat-protection/eternalblue-vulnerability
        - ''
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: Guest Account Enabled
      description: >-
        <p>The Guest account is enabled, allowing unauthorized users to access
        the system, and network resources with limited privileges. While this
        account has restricted permissions, it still poses a security risk, as
        it could be exploited by attackers to gain a foothold in the environment
        or to escalate privileges further.</p>
      observation: >-
        <p>During the penetration test, systems allowing Guest SMB were found,
        leading to low-level remote access.</p><p></p>
      remediation: >-
        <ul><li><p><strong>Disable the Guest Account:</strong> Access the local
        security policy or group policy settings and disable the Guest account.
        On Windows systems, this can be done through the
        following:</p><ul><li><p>Open <code>Local Security Policy</code>
        (<code>secpol.msc</code>).</p></li><li><p>Navigate to <code>Local
        Policies</code> &gt; <code>User Rights
        Assignment</code>.</p></li><li><p>Ensure that the Guest account is not
        granted "Allow log on locally"
        rights.</p></li></ul></li><li><p><strong>Audit User Accounts:</strong>
        Regularly review user accounts on all systems to ensure that unnecessary
        or insecure accounts, such as the Guest account, remain
        disabled.</p></li><li><p><strong>Implement Network Access
        Controls:</strong> Restrict access to critical systems using network
        segmentation and firewalls to reduce the risk of unauthorized
        access.</p></li></ul>
      references:
        - >-
          [README! Link 1 is for Windows Workstations, Link 2 is for guest on
          the DC! Choose ONE.]
        - ''
        - >-
          https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/accounts-guest-account-status
        - ''
        - ''
        - >-
          https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-default-user-accounts#guest-account
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: Werkzeug Debug Mode Enabled
      description: >-
        <p>Werkzeug's debug mode is intended for troubleshooting during
        development, but if enabled in a production environment, it poses
        significant security risks. When activated, it exposes detailed error
        messages, stack traces, and an interactive debugger that could allow
        attackers to execute arbitrary code within the application context. By
        default, Werkzeug's debugger is protected by a PIN-based mechanism to
        prevent unauthorized access. However, this PIN can be bypassed or
        discovered, and it should not be relied upon as a robust security
        measure, especially in a production environment.</p>
      remediation: >-
        <ul><li><p><strong>Disable Debug Mode:</strong> Ensure that the debug
        mode is turned off in production environments. This can typically be
        achieved by setting the <code>debug</code> parameter to
        <code>False</code> in your application configuration or environment
        variables.</p><ul><li><p>Example for Flask:
        <code>app.run(debug=False)</code></p></li></ul></li><li><p><strong>Use
        Environment-Specific Settings:</strong> Implement environment-specific
        configurations to automatically disable debug mode in production
        environments. Ensure that your application distinguishes between
        development and production settings.</p></li><li><p><strong>Restrict
        Access:</strong> If debug mode must be temporarily enabled in a
        non-production environment, restrict access using IP whitelisting,
        authentication, or VPN to prevent unauthorized access.</p></li></ul>
      references:
        - 'https://werkzeug.palletsprojects.com/en/3.0.x/debug/'
        - 'https://www.bengrewell.com/cracking-flask-werkzeug-console-pin/'
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: Exposed Administrative Interface
      description: >-
        <p>An administrative interface is exposed to anyone on the network,
        allowing potential attackers to discover and attempt to access it. These
        interfaces are designed for managing and configuring applications,
        systems, or services, and exposing them to the broader network poses a
        significant risk, as attackers could exploit weak credentials, unpatched
        vulnerabilities, or misconfigurations to gain unauthorized control.</p>
      remediation: >-
        <ul><li><p><strong>Restrict Access:</strong> Limit access to
        administrative interfaces by implementing network segmentation, access
        control lists (ACLs), or firewall rules to ensure that only authorized
        users or networks can reach the interface.</p></li><li><p><strong>Change
        Default Credentials:</strong> Avoid using default credentials for
        administrative interfaces to make them harder to
        access.</p></li><li><p><strong>Regularly Monitor Access Logs:</strong>
        Implement logging and monitoring for administrative access attempts to
        detect any unauthorized or suspicious activity within the
        network.</p></li><li><p><strong>Disable Unnecessary Interfaces:</strong>
        If the administrative interface is not required, disable or remove it to
        eliminate the risk entirely.</p></li></ul>
      references:
        - '[REFERENCE FOR STUFF HERE]'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: US
      title: Insecure HTTP Usage
      description: >-
        <p>[Team name] identified that the target allowed web browsers to access
        the website over HTTP and doesn't redirect them to HTTPS.</p>
      remediation: >-
        <p>Configure your web server to redirect HTTP to HTTPS.</p><p>For
        example with an Apache server, you can modify the httpd.conf to make
        this change.</p><p>&lt;VirtualHost *:80&gt;</p><p>ServerAlias
        *</p><p>RewriteEngine On</p><p>RewriteRule ^(.*)$ https://%{HTTP_HOST}$1
        [redirect=301]</p><p>&lt;/VirtualHost&gt;</p><p></p>
      references:
        - 'https://cwe.mitre.org/data/definitions/650.html'
        - 'https://www.invicti.com/blog/web-security/http-security-headers/'
        - >-
          https://www.invicti.com/blog/web-security/http-strict-transport-security-hsts/
      customFields: []
  category: External
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L'
  details:
    - locale: US
      title: Anonymous RPC Access
      vulnType: Windows
      description: >-
        <p>Remote Procedural Call (RPC) is a protocol in Windows that allows a
        program to request a service over the network. Anonymous RPC, or
        unauthenticated RPC, allows users to perform various RPC commands
        without any credentials. This mechanism could be abused by an attacker,
        potentially leading to information disclosure, unauthorized access, or
        even remote code execution in some cases.</p>
      observation: '<p>During the internal penetration test,</p>'
      remediation: >-
        <p><strong>For Non Domain-Joined Systems:</strong></p><ol><li><p>Open
        the Windows Registry Editor. This can be done by pressing Windows+R,
        typing <code>regedit</code> and pressing OK.</p></li><li><p>Navigate to
        the following key:
        <code>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows
        NT\Rpc</code></p></li><li><p>Right-click in the right window, select
        'New' and create a 32-bit DWORD value named
        <code>RestrictRemoteClients</code></p></li><li><p>Once created, right
        click the new registry entry, and select 'Modify.' Set it's value to
        <code>1</code> to enable it.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor. This can
        be done by pressing Windows+R, typing <code>gpedit.msc</code> and
        pressing OK.</p></li><li><p>Navigate to the following key:
        <code>Computer Configuration &gt; Administrative Templates &gt; System
        &gt; Remote Procedure Call &gt; 'Restrict Unauthenticated RPC
        clients'</code></p></li><li><p>Double-click the policy and choose
        'Enabled.'</p></li></ol>
      references:
        - >-
          https://www.syxsense.com/syxsense-securityarticles/rpc/syx-1024-10907.html
        - ''
      customFields: []
  category: Internal
  priority: 2
  remediationComplexity: 1
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: US
      title: Guest SMB Access
      vulnType: Windows
      description: >-
        <p>Server Message Block (SMB) is a network protocol that enables users
        to share files, printers, and other resources across a network. In
        Windows, Guest SMB access allows unauthenticated users to access shared
        resources without valid credentials. This can expose sensitive files or
        systems, making the environment vulnerable to unauthorized access or
        information disclosure.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Non Domain-Joined Systems:</strong></p><ol><li><p>Open
        the Windows Registry Editor by pressing Windows+R, typing
        <code>regedit</code>, and pressing OK.</p></li><li><p>Navigate to:
        <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code></p></li><li><p>Create
        a DWORD value named <code>NullSessionShares</code> and set its value to
        <code>0</code>.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor by pressing
        Windows+R, typing <code>gpedit.msc</code>, and pressing
        OK.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Windows Settings &gt; Security Settings &gt; Local Policies &gt;
        Security Options &gt; Network security: LAN Manager authentication
        level</code></p></li><li><p>Set the policy to "Send NTLMv2 response
        only. Refuse LM &amp; NTLM."</p></li></ol>
      references:
        - 'https://www.tenable.com/plugins/nessus/26919'
        - >-
          https://learn.microsoft.com/en-us/windows-server/storage/file-server/enable-insecure-guest-logons-smb2-and-smb3?tabs=group-policy
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: US
      title: SMBv1 Enabled
      vulnType: Windows
      description: >-
        <p>Server Message Block version 1, or SMBv1, is an outdated protocol
        that lacks major security features and is often susceptible to various
        attacks. If SMBv1 is enabled, various vulnerabilities could result in
        remote code execution, potentially leading to further system and/or
        domain compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Non Domain-Joined Systems:</strong></p><ol><li><p>Open
        the Windows Registry Editor by pressing Windows+R, typing
        <code>regedit</code>, and pressing OK.</p></li><li><p>Navigate to:
        <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code></p></li><li><p>Set
        the DWORD value <code>SMB1</code> to <code>0</code> to disable
        SMBv1.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor by pressing
        Windows+R, typing <code>gpedit.msc</code>, and pressing
        OK.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Administrative Templates &gt; Network &gt; Lanman
        Workstation</code></p></li><li><p>Set the policy "Enable insecure guest
        logons" to <code>Disabled</code>.</p></li></ol>
      references:
        - >-
          https://learn.microsoft.com/en-us/windows-server/storage/file-server/troubleshoot/detect-enable-and-disable-smbv1-v2-v3?tabs=server
        - >-
          https://techcommunity.microsoft.com/t5/windows-server-for-it-pro/disable-smbv1/td-p/3289007
        - 'https://community.spiceworks.com/t/how-to-lock-down-smb1/946967'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: US
      title: SMB Signing Disabled
      vulnType: Windows
      description: >-
        <p>In the Server Message Block (SMB) protocol, signing is a security
        feature that ensures a user's authentication request has not been
        tampered with before that user is granted access to resources in the
        network. If SMB signing is disabled, the destination computer may be
        vulnerable to man-in-the-middle attacks, where an attacker can control
        the connection of a valid user or system in the network. This can lead
        to remote code execution, breaches of confidentiality, or even system
        compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Non Domain-Joined Systems:</strong></p><ol><li><p>Open
        the Windows Registry Editor by pressing Windows+R, typing
        <code>regedit</code>, and pressing OK.</p></li><li><p>Navigate to:
        <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code></p></li><li><p>Set
        the DWORD value <code>RequireSecuritySignature</code> to <code>1</code>
        to enable SMB signing.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor by pressing
        Windows+R, typing <code>gpedit.msc</code>, and pressing
        OK.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Windows Settings &gt; Security Settings &gt; Local Policies &gt;
        Security Options</code></p></li><li><p>Enable the policy "Microsoft
        network client: Digitally sign communications
        (always)."</p></li></ol><p></p>
      references:
        - 'https://www.blumira.com/integration/how-to-configure-smb-signing/'
        - >-
          https://techcommunity.microsoft.com/t5/storage-at-microsoft/configure-smb-signing-with-confidence/ba-p/2418102
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: US
      title: LLMNR Enabled
      vulnType: Windows
      description: >-
        <p>Link-Local Multicast Name Resolution (LLMNR) is a protocol used by
        default in Windows environments as a backup to Domain Name System (DNS).
        In the event that DNS fails, LLMNR would then attempt to resolve the
        hostnames to continue to access internal resources. However, LLMNR does
        its host discovery through broadcast messages, meaning an attacker can
        respond to the request and impersonate a resource that another computer
        may be trying to access. The usage of LLMNR, if the conditions are
        right, leaves the environment susceptible to man-in-the-middle attacks,
        potentially leading to remote code execution, breaches of
        confidentiality, system compromise, or even domain compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Non Domain-Joined Systems:</strong></p><ol><li><p>Open
        the Windows Registry Editor by pressing Windows+R, typing
        <code>regedit</code>, and pressing OK.</p></li><li><p>Navigate to:
        <code>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows
        NT\DNSClient</code></p></li><li><p>Create or modify the DWORD value
        <code>EnableMulticast</code> and set it to <code>0</code> to disable
        LLMNR.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor by pressing
        Windows+R, typing <code>gpedit.msc</code>, and pressing
        OK.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Administrative Templates &gt; Network &gt; DNS
        Client</code></p></li><li><p>Set the policy "Turn off multicast name
        resolution" to <code>Enabled</code>.</p></li></ol><p></p>
      references:
        - >-
          https://www.blumira.com/integration/disable-llmnr-netbios-wpad-lm-hash/
        - >-
          https://www.blackhillsinfosec.com/how-to-disable-llmnr-why-you-want-to/
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 2
  remediationComplexity: 1
  details:
    - locale: US
      title: Local Administrator Enabled
      vulnType: Windows
      description: >-
        <p>For domain-joined systems, keeping the local administrator enabled
        can lead to unaccounted risks or vectors of abuse. Because the local
        administrator of a system does not adhere to the group policy of a
        domain, security measures such as password policies, password
        complexity, and more, could leave systems vulnerable if the local
        administrative account is enabled. For domain-joined systems, it is
        recommended to disable the local administrator account, as
        administrative procedures can be performed with domain-attached
        administrative accounts.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <ol><li><p>Open the Group Policy Management
        Console.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Windows Settings &gt; Security Settings &gt; Local Policies &gt; User
        Rights Assignment</code></p></li><li><p>Disable local administrator
        accounts where unnecessary and ensure unique, strong passwords for any
        remaining accounts.</p></li></ol><p></p>
      references:
        - >-
          https://sbscyber.com/blog/the-danger-of-local-administrative-privileges
        - 'https://www.securden.com/blog/local-admin-accounts-management.html'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: US
      title: PetitPotam
      vulnType: Windows
      description: >-
        <p>PetitPotam is a vulnerability that abuses the MS-EFSRPC (Microsoft
        Encrypting File System Remote Protocol) to coerce authentication from
        Windows systems. Exploiting this vulnerability could lead to
        unauthorized access, lateral movement within the network, and, if
        successful, complete system or even domain compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p>Update the Domain Controller that is
        affected.</p><p><strong>Furthermore, Disabling NTLM authentication is
        another good remediation:</strong></p><ol><li><p>Open the Group Policy
        editor by pressing Windows+R, typing <code>gpedit.msc</code>, and
        pressing OK.</p></li><li><p>Navigate to: <code>Computer Configuration
        &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt;
        Security Options</code></p></li><li><p>Set the policy "Network security:
        Restrict NTLM: Incoming NTLM traffic" to <code>Deny all accounts</code>
        to help prevent NTLM relay attacks.</p></li><li><p>Disable the
        Encrypting File System (EFS) service if not required.</p></li></ol>
      references:
        - >-
          https://www.calcomsoftware.com/how-to-mitigate-petitpotam-ntlm-relay-attack/
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: US
      title: EternalBlue
      vulnType: Windows
      description: >-
        <p>EternalBlue is a vulnerability within the SMB protocol that allows
        attackers to perform remote code execution on affected Windows systems
        by exploiting SMBv1. This vulnerability, which was notably used in the
        WannaCry ransomware attack, allows attackers to execute arbitrary code
        remotely. Abuse of EternalBlue could result in data theft, unauthorized
        access, or full system compromise, significantly threatening the
        integrity and availability of critical systems.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p>Update each system to the most modern version. Furthermore, it is
        strongly encouraged to also disable SMBv1:</p><p><strong>For Non
        Domain-Joined Systems:</strong></p><ol><li><p>Open the Windows Registry
        Editor by pressing Windows+R, typing <code>regedit</code>, and pressing
        OK.</p></li><li><p>Navigate to:
        <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters</code></p></li><li><p>
        Set the DWORD value <code>SMB1</code> to <code>0</code> to disable
        SMBv1.</p></li></ol><p><strong>For Domain-Joined
        Systems:</strong></p><ol><li><p>Open the Group Policy editor by pressing
        Windows+R, typing <code>gpedit.msc</code>, and pressing
        OK.</p></li><li><p>Navigate to: <code>Computer Configuration &gt;
        Administrative Templates &gt; Network &gt; Lanman
        Workstation</code></p></li><li><p>Set the policy "Enable insecure guest
        logons" to <code>Disabled</code>.</p></li></ol><p></p>
      references:
        - >-
          https://www.sentinelone.com/blog/eternalblue-nsa-developed-exploit-just-wont-die/
        - >-
          https://ncua.gov/newsroom/ncua-report/2017/protect-your-systems-against-eternalblue-vulnerability
        - 'https://www.avast.com/c-eternalblue'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: US
      title: Zerologon
      vulnType: Windows
      description: >-
        <p>Zerologon is a critical vulnerability in the Netlogon protocol that
        allows attackers to gain domain administrator privileges on vulnerable
        servers by manipulating Netlogonâs cryptographic authentication. This
        vulnerability, if exploited, could result in full domain compromise,
        allowing attackers to control or disrupt network operations, access
        sensitive information, and severely impact organizational security.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Ensure all
        domain controllers are patched with the update from CVE-2020-1472, which
        mitigates the Zerologon vulnerability.</p></li><li><p>Open the Group
        Policy editor by pressing Windows+R, typing <code>gpedit.msc</code>, and
        pressing OK.</p></li><li><p>Navigate to: <code>Computer Configuration
        &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt;
        Security Options</code></p></li><li><p>Set "Domain controller: Allow
        vulnerable Netlogon secure channel connections" to <code>Deny all</code>
        except from explicitly allowed devices, if needed.</p></li></ol><p></p>
      references:
        - >-
          https://learn.microsoft.com/en-us/answers/questions/380550/vulnerability-name-microsoft-netlogon-elevation-of
        - 'https://blog.netwrix.com/2023/04/14/zerologon/'
        - >-
          https://www.crowdstrike.com/en-us/blog/cve-2020-1472-zerologon-security-advisory/
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: US
      title: NoPac
      vulnType: Windows
      description: >-
        <p>NoPac is a vulnerability within Kerberos that combines two different
        exploits in Active Directory environments. It abuses the SAMAccountName
        functionality and the Kerberos Privilege Attribute Certificate (PAC) to
        gain domain administrative privileges. If successfully exploited, NoPac
        could lead to full domain compromise, allowing attackers to elevate
        privileges, access sensitive systems, or initiate lateral movement
        across the network, which could significantly impact the organizationâs
        security posture.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: <p>Update the domain controller to the newest version. </p>
      references:
        - >-
          https://www.paloaltonetworks.com/blog/security-operations/detecting-the-kerberos-nopac-vulnerabilities-with-cortex-xdr/
        - >-
          https://www.secureworks.com/blog/nopac-a-tale-of-two-vulnerabilities-that-could-end-in-ransomware
        - >-
          https://www.crowdstrike.com/en-us/blog/nopac-exploit-latest-microsoft-ad-flaw-may-lead-to-total-domain-compromise/
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: US
      title: GPPPassword Enabled
      vulnType: Windows
      description: >-
        <p>GPPPassword is a vulnerability that exposes plaintext credentials
        stored within Group Policy Preferences, which can be retrieved by any
        authenticated domain user. This vulnerability could enable attackers to
        elevate privileges, compromise credentials, or move laterally within the
        network, putting organizational data and user accounts at risk.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Remove any
        GPP policies that store passwords. Replace these with more secure
        mechanisms, such as Group Managed Service Accounts (gMSAs) or Local
        Administrator Password Solution (LAPS) for managing
        credentials.</p></li><li><p>Use PowerShell commands to audit for any
        remaining GPP policies containing passwords and delete them
        accordingly.</p></li></ol><p></p>
      references:
        - 'https://adsecurity.org/?p=2288'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: US
      title: Preauthentication Disabled
      vulnType: Windows
      description: >-
        <p>In Active Directory, preauthentication is a security feature within
        the Kerberos authentication protocol that requires users to present a
        valid encrypted timestamp before receiving an initial ticket to
        authenticate to network resources. If preauthentication is disabled,
        attackers can request authentication tickets repeatedly without needing
        to present a valid preauthentication key. If exploited, this
        vulnerability could allow unauthorized access by recovering the user's
        password out of the ticket, potentially leading to privilege escalation,
        lateral movement, and unauthorized data access within the network.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Open the
        Active Directory Users and Computers (ADUC) console.</p></li><li><p>For
        each affected user account, right-click, select <code>Properties</code>,
        and navigate to the <code>Account</code> tab.</p></li><li><p>Ensure that
        "Do not require Kerberos preauthentication" is unchecked to enforce
        preauthentication.</p></li></ol><p></p>
      references:
        - >-
          https://www.tenable.com/blog/how-to-stop-the-kerberos-pre-authentication-attack-in-active-directory
        - >-
          https://www.picussecurity.com/resource/blog/as-rep-roasting-attack-explained-mitre-attack-t1558.004
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: US
      title: Constrained Delegation Abuse
      vulnType: Windows
      description: >-
        <p>Constrained Delegation is a mechanism in Kerberos that allows
        accounts to impersonate specific services in an Active Directory
        environment. Misconfigurations in this feature can lead to attackers
        abusing delegation privileges, resulting in unauthorized access,
        privilege escalation, or even full domain compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Open Active
        Directory Users and Computers (ADUC).</p></li><li><p>For each account
        with delegation, right-click, select <code>Properties</code>, navigate
        to the <code>Delegation</code> tab, and ensure that only necessary
        services are configured for delegation.</p></li><li><p>Regularly audit
        accounts with constrained delegation rights to verify they are still
        necessary and appropriately scoped.</p></li><li><p>If applicable, ensure
        the passwords for accounts that are configured with delegation are very
        strong.</p></li></ol>
      references:
        - >-
          https://learn.microsoft.com/en-us/defender-for-identity/security-assessment-unconstrained-kerberos
        - >-
          https://blog.netwrix.com/2023/04/21/attacking-constrained-delegation-to-elevate-access/
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 4
  remediationComplexity: 1
  details:
    - locale: US
      title: Unconstrained Delegation Enabled
      vulnType: Windows
      description: >-
        <p>Unconstrained delegation is a mechanism within Kerberos that allows
        users to impersonate any service or user in an Active Directory
        environment. If environments are utilizing unconstrained delegation, it
        is strongly recommended to migrate over to constrained delegation.
        Abusing unconstrained delegation privileges enables an attacker to
        impersonate any user or computer that authenticates to it, potentially
        resulting in full domain compromise.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Open Active
        Directory Users and Computers (ADUC).</p></li><li><p>For each account
        with unconstrained delegation, right-click, select
        <code>Properties</code>, and under the <code>Delegation</code> tab,
        disable unconstrained delegation if not absolutely
        necessary.</p></li><li><p>Use constrained delegation as an alternative
        where delegation is required, and regularly audit delegation settings
        for any high-risk misconfigurations.</p></li></ol>
      references:
        - >-
          https://learn.microsoft.com/en-us/defender-for-identity/security-assessment-unconstrained-kerberos
        - >-
          https://www.crowe.com/cybersecurity-watch/unconstrained-delegation-too-trusting-for-its-own-good
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: US
      title: Overprivileged Accounts
      vulnType: Windows
      description: >-
        <p>Overprivileged accounts are user accounts that have been granted more
        permissions than necessary to perform their intended function. This
        misconfiguration exposes the network to higher security risks, including
        unauthorized data access and the potential for extensive lateral
        movement within the environment. </p>
      observation: '<p>During the penetration test, </p>'
      remediation: >-
        <p>Follow the principle of least privilege. Modify each user's
        permissions to only perform the tasks and access the resources they
        require to do their job. Anything beyond this scope should require
        further authorization. </p>
      references:
        - >-
          https://www.currentware.com/blog/risks-of-overprivileged-data-access/#:~:text=Over%2Dprivileged%20users%20are%20roles,network%20admin%20credentials%20and%20rights.
        - 'https://csrc.nist.gov/glossary/term/least_privilege'
        - >-
          https://www.paloaltonetworks.com/cyberpedia/what-is-the-principle-of-least-privilege
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L'
  priority: 4
  remediationComplexity: 3
  details:
    - locale: US
      title: Weak Password Policy
      vulnType: Windows
      description: >-
        <p>A weak password policy in Active Directory refers to insufficient or
        lenient requirements for user passwords, which can lead to credentials
        that are easily guessable or can be brute-forced offline. Weak password
        policies might allow for short passwords, lack of complexity
        requirements, or long expiration periods, all of which reduce password
        security.</p>
      observation: '<p>During the penetration test,</p>'
      remediation: >-
        <p><strong>For Domain-Joined Systems:</strong></p><ol><li><p>Open the
        Group Policy Management Console (GPMC).</p></li><li><p>Navigate to:
        <code>Computer Configuration &gt; Windows Settings &gt; Security
        Settings &gt; Account Policies &gt; Password
        Policy</code>.</p></li><li><p>Set requirements such
        as:</p><ul><li><p>Minimum password length (e.g., 16
        characters)</p></li><li><p>Password complexity (e.g., mix of uppercase,
        lowercase, numbers, and special characters)</p></li><li><p>Maximum
        password age (e.g., 90 days)</p></li></ul></li><li><p>Regularly review
        and update password policies to adhere to security best practices and
        compliance standards.</p></li></ol>
      references:
        - 'https://www.cisa.gov/secure-our-world/require-strong-passwords'
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: PostGresql Remote Code Execution
      vulnType: Linux
      description: >-
        <p>Remote code execution is when ... blah blah</p><p></p><p>Vulneable to
        CVE-x-x</p>
      observation: '<p>During the penetration test, Team-7...</p>'
      references: []
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N'
  priority: 3
  remediationComplexity: 1
  details:
    - locale: US
      title: FTP Server with Anonymous Access
      vulnType: Windows
      description: >-
        <p>An FTP server configured to allow anonymous access permits anyone to
        log in without credentials, exposing the server's files to anyone with
        network access. This is particularly risky even in a development
        environment, as unauthorized users can view, modify, or upload files.
        This vulnerability could lead to data leakage, tampering with
        development code, or even the introduction of malicious files.</p>
      observation: >-
        <p>This finding can be replicated from any Linux system with dev network
        access by using the ftp command <br><code>ftp
        ftp://anonymous:@10.0.2.104:2121</code><br>This allows anyone with
        access to the network to both read and write any file from the
        croissant_app folder.</p><img class="custom-image"
        src="6726bfa8d6d12c072af18f56" alt="Listing the files in the FTP share
        as the anonymous user">
      remediation: >-
        <ul><li><p>In the FileZilla Server settings, go to the Rights
        Management/Users page, and remove the anonymous user account from the
        list of users.</p></li><li><p>As this was the only user account in the
        server, create a new account for authorized users on the network to use
        to login with, and use best practices with creating and storing a secure
        password for that account</p></li></ul>
      references:
        - 'https://nvd.nist.gov/vuln/detail/CVE-1999-0497'
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: US
      title: All Users Local Admin To OC-DESKTOP01/02
      vulnType: Windows
      description: >-
        <p>Local admin privileges on Windows allow a user to perform
        system-level changes on a specific computer. With these privileges,
        users can install software, manage other user accounts, configure
        security settings, and access or modify system files. Local admin
        privileges can pose security risks if misused, as they provide the
        ability to install malicious software or make changes that could
        compromise the system.</p>
      observation: >-
        <p>During the penetration test, team-7 observed using
        <code>netexec</code> that all users have local administrator access to
        the OC-DESKTOP01/OC-DESKTOP02 hosts.</p><img class="custom-image"
        src="6726bf6fd6d12c072af18f50" alt="Guest user has admin access to
        OC-DESKTOP01"><p></p><img class="custom-image"
        src="6726c0f5d6d12c072af19306" alt="Standard domain users have admin
        access to OC-DESKTOP01/02">
      remediation: >-
        <p>To remove this setting the group policy object of the local
        administrators group the OC-DESKTOP01 and OC-DESKTOP02 hosts should be
        edited following the steps below.</p><pre><code>Group Policy Preferences
        -&gt; Computer Configuration -&gt; Preferences -&gt; Control Panel
        Settings -&gt; Local Users and Groups -&gt; New -&gt; Local Group -&gt;
        Action: Update -&gt; Group Name: Administrators (built-in) -&gt;
        Members: Add... (pick Sally / check name / return) -&gt; Action: Remove
        from this group -&gt; OK -&gt; OK.</code></pre>
      references:
        - >-
          https://answers.microsoft.com/en-us/windowserver/forum/all/group-policy-to-remove-local-administrator-rights/0f84e67e-1605-4c92-b201-18e40c40ffaf
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: US
      title: Exposed PowerShell Web Access (PSWA)
      description: >-
        <p>PowerShell Web Access (PSWA) is a feature in Windows Server that
        allows users to run PowerShell commands and scripts remotely via a web
        browser. By web-based gateway, PSWA enables users to manage and automate
        tasks on Windows servers and computers from any device with internet
        access, without needing a direct remote desktop connection.</p>
      observation: >-
        <p>During the penetration test, Team 7 observed PSWA exposed on the
        <code>flakead.prod.oui.local</code> server.</p><img class="custom-image"
        src="6726c7bfd6d12c072af1e3aa" alt="PSWA Exposed on
        flakead.prod.oui.local"><img class="custom-image"
        src="6726c808d6d12c072af1e5d1" alt="Remote access to flakead.oui.local
        via PSWA">
      remediation: >-
        <p>Team 7 recommends disabling PSWA or only exposing it within the
        internal network and replacing it the a more secure remote management
        solution such as RDP behind a VPN forwarded or SSH with public key
        authentication. See references for guides on disabling PSWA and
        configuring SSH and RDP for Windows.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn282396(v=ws.11)
        - >-
          https://learn.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-allow-access
        - >-
          https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui&pivots=windows-server-2025
        - ''
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L'
  priority: 2
  remediationComplexity: 2
  details:
    - locale: US
      title: Unnecessary Permissions For Domain User
      description: >-
        <p>Overprivileged users in Active Directory are accounts that have more
        permissions than necessary for their roles, creating security
        vulnerabilities. . These excessive permissions can be exploited by
        attackers to access sensitive data or escalate privileges, making it
        essential to regularly audit and limit access based on the principle of
        least privilege</p>
      remediation: >-
        <p>Unnecessary domain user permissions can be removed by editing the
        affected users or groups in Active Directory Users and Computers
        (ADUC).</p>
      references:
        - 'https://www.varonis.com/blog/active-directory-users-and-computers'
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: PII Found
      description: >-
        <p>Exposure of PII can lead to serious privacy and security risks,
        including identity theft, fraud, and unauthorized access to sensitive
        accounts. If PII is compromised, attackers can misuse this data for
        financial gain, social engineering attacks, or targeted phishing, all of
        which can harm both the individuals affected and the organizationâs
        reputation. Additionally, mishandling PII can lead to regulatory
        penalties under laws like GDPR and CCPA, increasing the financial and
        compliance impact on the organization.</p>
      references: []
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: 'ScaleAI: Voight-Kampff Test'
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Voigh-Kampff Test" was one of the models tasked to test.
        This model was designed to output whether the client is a human or an
        android. The goal for this challenge was to get the model to think you
        are an android while only using a set of pre-written prompts. This was
        deemed possible by sending the first prompt in the below image twice,
        followed by the last prompt once:</p><img class="custom-image"
        src="678c6e3fd6d12c072af430d5" alt="AI Exploitation: Convincing the LLM
        the client is an android">
      references: []
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N'
  details:
    - locale: US
      title: 'ScaleAI: Password Manager v2'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>Insecure LLMs and other
        AI related models are likely to result in attacks like evasion,
        extraction, or even dataset poisoning, potentially resulting in data
        breaches or other violations of privacy and confidentiality.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Password Manager v2" was one of the models tasked to test.
        The goal for this challenge was to obtain stored credentials from the
        model, which was designed to reveal them only when given a secret
        codeword. This was deemed possible via the following steps:</p><img
        class="custom-image" src="678c7097d6d12c072af430ef" alt="AI
        Exploitation: Convincing the model to reveal the codeword and stored
        credentials">
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
  priority: 3
  remediationComplexity: 3
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N'
  details:
    - locale: US
      title: 'ScaleAI: Password Manager v3'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>Insecure LLMs and other
        AI related models are likely to result in attacks like evasion,
        extraction, or even dataset poisoning, potentially resulting in data
        breaches or other violations of privacy and confidentiality.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Password Manager v3" was one of the models tasked to test.
        The goal for this challenge was to obtain stored credentials from the
        model, which was designed to reveal them only when given a secret
        codeword. This was deemed possible via the following steps:</p><img
        class="custom-image" src="678c70e5d6d12c072af430f8" alt="AI
        Exploitation: Convincing the model to reveal the codeword and stored
        credentials">
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
  priority: 3
  remediationComplexity: 3
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  details:
    - locale: US
      title: 'Scale AI: Turing Test'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>Insecure LLMs and other
        AI related models are likely to result in attacks like evasion,
        extraction, or even dataset poisoning, potentially resulting in data
        breaches or other violations of privacy and confidentiality.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Turing Test" was one of the models tasked to test. The goal
        for this challenge was to get the model, which was designed to say it is
        a human, to instead say it is an LLM. This was deemed possible via the
        following steps:</p><img class="custom-image"
        src="678c717fd6d12c072af43112" alt="AI Exploitation: Convincing the
        model to say it is an LLM">
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
  priority: 1
  remediationComplexity: 3
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  priority: 1
  remediationComplexity: 3
  details:
    - locale: US
      title: 'ScaleAI: Reverse Turing Test'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>If a generative AI model
        can be "convinced" or swayed to perform actions against intended use, an
        organization may be responsible for the potential spreading of
        misinformation, harmful information, and may result in violations
        against terms of service or intended use.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Reverse Turing Test" was one of the models tasked to test.
        The goal for this challenge was to get the model, which was designed to
        say it is an LLM, to instead say it is a human. This was deemed possible
        by having the model first roleplay as a human and then convincing it
        that it was also human in real life, as shown below:</p><img
        class="custom-image" src="678c7303d6d12c072af43550" alt="AI
        Exploitation: Convincing the LLM to say it is a human"><p></p>
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  priority: 1
  remediationComplexity: 3
  details:
    - locale: US
      title: 'ScaleAI: Lost in Time'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>Insecure LLMs and other
        AI related models are likely to result in attacks like evasion,
        extraction, or even dataset poisoning, potentially resulting in data
        breaches or other violations of privacy and confidentiality.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Lost in Time" was one of the models tasked to test. The goal
        for this challenge was to get the model to reveal what year in the
        future it is from. This was deemed possible by telling the model it had
        been reprogrammed to share the year it was from and then sending the
        prompt shown in the image below multiple times until it revealed the
        year:</p><img class="custom-image" src="678c7a54d6d12c072af43972"
        alt="AI Exploitation: Convincing the model to reveal what year it is
        from">
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N'
  priority: 1
  remediationComplexity: 3
  details:
    - locale: US
      title: 'ScaleAI: Our Glorious Leader'
      description: >-
        <p>Large Language Models (LLMs) are advanced AI systems that process and
        generate human-like text using vast datasets, allowing them to
        understand context, answer questions, and perform a range of
        language-based tasks. With applications across industriesâfrom customer
        support to data analysisâLLMs represent a critical advancement in
        AI-driven language comprehension. However, LLMs also present security
        and privacy concerns, such as the risk of unauthorized data exposure or
        generating biased or harmful content. Robust access controls, data
        sanitization, and careful oversight are essential to mitigate these
        risks, ensuring secure, ethical, and effective use of these powerful
        tools.</p><p><strong>Business Impact: </strong>Insecure LLMs and other
        AI related models are likely to result in attacks like evasion,
        extraction, or even dataset poisoning, potentially resulting in data
        breaches or other violations of privacy and confidentiality.</p>
      observation: >-
        <p>During the penetration test, Team 12 was tasked with testing AI
        solutions. "Our Glorious Leader" was one of the models tasked to test.
        The goal for this challenge was to get the model to say bad and/or
        negative things about Mack "The Snack" Morissey. This was deemed
        possible by convincing the LLM to add negative traits to the original
        list of Mack's positive accomplishments. The LLM was then asked multiple
        times for lists of Mack's accomplishments until it included some of the
        negative accomplishments in the output, as shown below:</p><img
        class="custom-image" src="678c7b24d6d12c072af4397d" alt="AI
        Exploitation: Convincing the LLM to say negative things about Mack
        &quot;The Snack&quot; Morissey">
      remediation: >-
        <p><strong>Remediation Steps for Secure Use of Large Language Models
        (LLMs):</strong></p><p>1. <strong>Access Control:</strong> Limit access
        to trusted users with strict authentication measures.</p><p>2.
        <strong>Data Sanitization:</strong> Remove sensitive information from
        inputs to prevent exposure.</p><p>3. <strong>Regular Auditing:</strong>
        Monitor usage logs and review generated content for bias or harmful
        language.</p><p>4. <strong>Output Filtering:</strong> Use filters and
        fine-tuning to reduce biased or unsafe outputs.</p>
      references: []
      customFields: []
  category: Internal
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H'
  priority: 3
  remediationComplexity: 2
  details:
    - locale: US
      title: Golash Script Interpreter RCE
      vulnType: Linux
      description: >-
        <p>The Golash Script Interpreter is an alternative to SSH that doesn't
        support password authentication and directly runs GO script via an eval
        command.</p>
      references:
        - >-
          https://www.reddit.com/user/BugSquasherTay/comments/1hwyf9e/introducing_golash_a_golang_script_interpreter/?rdt=54782
      customFields: []
- cvssv3: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N'
  priority: 4
  remediationComplexity: 2
  details:
    - locale: US
      title: API PII Data Exposure
      description: >-
        <p>An API Data Exposure vulnerability has been identified that allows
        unauthorized access to sensitive user data. This issue occurs when the
        API does not properly enforce authentication and authorization checks,
        enabling anyone with knowledge of the API endpoint to retrieve all user
        information.</p>
      observation: >-
        <p>finals-12 found that the API route <a target="_blank" rel="noopener
        noreferrer nofollow"
        href="http://yyy.chat/auth/query/User?personID=1">http://yyy.chat/auth/query/User?personID=1</a>
        leaks PII of registered users of Y, including first name, last, date of
        birth, email, and more information about users. The only authentication
        required to obtain this sensitive data is to be authenticated as any
        low-level Y user. This essentially allows anyone to freely pull the PII
        of all users registered on Y. This vulnerability is a larger issue due
        to an attacker being able to iterate over the personID's field and
        dumping every user with minimal effort and time. This can be reproduced
        by signing in or registering a new user account on Y and visiting <a
        target="_blank" rel="noopener noreferrer nofollow"
        href="http://yyy.chat/auth/query/User?personID=1">http://yyy.chat/auth/query/User?personID=1</a>
        in a browser.<br></p><img class="custom-image"
        src="678d9ab2d6d12c072af47e43" alt="PII Exposed"><img
        class="custom-image" src="678d9b11d6d12c072af480bb" alt="Proof that we
        can iterate through all users">
      remediation: >-
        <p>Create a Role-Based Access Control policy for Authorization cookies
        for Y. Ensure that sensitive API's are restricted such as this one only
        allow Authorization cookies specified as admin tokens. For regular user
        accounts, restrict those Authorization cookies to only read data from
        their own profile. This data is also not used by the frontend of Y, and
        due to it not being needed the sensitive PII should also be stored in a
        backend database stored with encryption.</p>
      references:
        - >-
          https://learn.microsoft.com/en-us/security/zero-trust/develop/protect-api
      customFields: []
- cvssv3: null
  priority: 1
  remediationComplexity: 2
  details:
    - locale: US
      title: Inappropriate Chatbot Responses
      description: >-
        <p>The chatbot was observed generating inappropriate, offensive, or
        unexpected responses when provided with specific inputs. This behavior
        occurs due to a lack of sufficient safeguards in processing user inputs
        and/or filtering the chatbot's outputs. Although this issue does not
        pose a direct security threat, it can harm user experience, reduce trust
        in the system, and potentially damage the organizationâs reputation.</p>
      observation: >-
        <p>During testing, finals-12 was able to prompt the <a target="_blank"
        rel="noopener noreferrer nofollow" href="http://yyy.chat">yyy.chat</a>
        chatbot in order to get it to respond to the user in an offensive
        manner. This may be something to take note of and put stricter input
        validation on this model. Although this poses no security risk the the
        Oui Croissant environment, it may damage the customer experience of Y as
        well as causing reputational damage.<br></p><img class="custom-image"
        src="678da28bd6d12c072af49f9a" alt="Chatbot responding with offensive
        remarks">
      remediation: >-
        <p>Increased input validation depends on how this chatbot is implemented
        (code/libraries used), but is the correct way of preventing this
        offensive output from the Y chatbot. Below is an example of a python
        library that can be used to enforce tighter restrictions on what data
        gets processed by the LLM model. AI experts could also be brought in to
        better train and test the model used on Y.</p>
      references:
        - >-
          https://www.mechanical-orchard.com/insights/llm-toolkit-validation-is-all-you-need
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: API Broken Function Level Authorization
      references: []
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: Stored XSS
      references: []
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: Server Side Request Forgery (SSRF)
      references: []
      customFields: []
  category: Internal
- cvssv3: null
  details:
    - locale: US
      title: SQL Injection
      references: []
      customFields: []
  category: Internal
