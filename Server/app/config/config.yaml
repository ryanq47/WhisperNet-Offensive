server:
  name: !!str "name"

  tls:
    # These 2 are used only by start.sh
    # These do not need to exist, however, if they don't, start.sh will create them with the below options
    tls_key_file: !!str ./server.key
    tls_crt_file: !!str ./server.crt

    # these are used by everything else
    # common name for tls cert
    tls_cn: !!str "some.domain"
    # org name for tls cert
    tls_org: !!str "some-company"
    # country code for tls cert, 2 letters
    tls_country: !!str "AA"
    # email for tls cert - if you feel like doxing yourself. 
    tls_email: !!str "some@email.com"
    # How long before the cert expires
    tls_expire: !!int 180

  authentication:
    bcrypt:
      rounds: !!int 14 # Rounds for Bcrpyt encryption. Up to 24, however the higher you go, the higher the computation time. 

    jwt:
      expiration: !!int  900 # Expiration time for tokens once generated, in seconds

  endpoints: # endpoint settings
    enable_registration: !!bool True # enable/disable registration endpoint

  audit: # audit settings
    log:
      max_file_size: !!int 1000000 # in Bytes
      max_file_backups: !!int 10   # how many files to keep after rollover
      file_name: !!str "audit.log"

  ftp:
    bind:
      ip: !!str "0.0.0.0"
      port: !!int 21

    users:
      anonymous: 
        enabled: !!bool False # Allow anonymous user
        permissions: !!str "w" # permissions for anonymous user

      standard:
        permissions: !!str "elradfmw" # Permissions for standard user

    tls:
      enabled: True # enable TLS
      tls_key_file: !!str plugins/ftp_server/ftp_key.pem #key & crt files, by default will use the already generated certs
      tls_crt_file: !!str plugins/ftp_server/ftp_cert.pem

    misc:
      banner: !!str "Whispernet-FTP Server" # banner for FTP if you decide you want this.
      # by default, it displays the pyftpd lib, so set to "" if you don't want that

    #config:
    #  root_dir: !!str "ftp" # use relative path for putting it in server root, or an absolute path for anywhere on box


  binaries:
    agents:
      x64_windows_agent: 
        buildfile: !!str "_docker/dockerfiles/debian_windows_agent_x86.dockerfile"
        source_code: str!! "agents/windows/."
        description: !!str "An x64 windows agent"
        language: !!str "rust"
        #source_code: !!str

      x86_windows_agent: 
        buildfile: !!str "_docker/dockerfiles/debian_windows_agent_x86.dockerfile"
        source_code: str!! "agents/windows/."
        description: !!str "An x86 windows agent"
        language: !!str "rust"

    # droppers:
    #   x64_windows_dropper: 
    #     buildfile: !!str "_docker/dockerfiles/debian_windows_dropper_x64.dockerfile"
    #     description: !!str "An x64 windows dropper"
    #     language: !!str "rust"

    #   x86_windows_dropper: 
    #     buildfile: !!str "_docker/dockerfiles/debian_windows_dropper_x86.dockerfile"
    #     description: "An x86 windows dropper"
    #     language: !!str "rust"

    delivery:
      # loader/droppers can go here. basically the same thing
      local_shellcode_execution: 
        #buildfile: !!str "_docker/dockerfiles/debian_windows_dropper_x64.dockerfile"
        type: !!str "loader"
        description: !!str "Loads shellcode into memory in the current process, executes it"
        language: !!str "rust"
        source_code: !!str "agents/windows/loaders/local_shellcode_execution"

      # name_of_deliv_02: 
      #   type: !!str "dropper" # or "loader"
      #   #buildfile: !!str "_docker/dockerfiles/debian_windows_dropper_x86.dockerfile"
      #   source_code: str!! "agents/windows/."
      #   description: "An x86 windows dropper"
      #   language: !!str "rust"

    customs:
      x64_windows_custom: 
        buildfile: !!str "_docker/dockerfiles/debian_windows_custom_x64.dockerfile"
        source_code: str!! "agents/windows/."
        description: !!str "An x64 windows dropper"
        language: !!str "rust"

      x86_windows_custom: 
        buildfile: !!str "_docker/dockerfiles/debian_windows_custom_x86.dockerfile"
        source_code: str!! "agents/windows/."
        description: "An x86 windows dropper"
        language: !!str "rust"

# https://medium.com/building-the-system/gunicorn-3-means-of-concurrency-efbb547674b7
# Gunicorn Perf Optimization reference
wsgi:
  # bind options for WSGI/Gunicorn
  bind:
    port: !!int 8081
    ip: !!str "0.0.0.0"

  # Number of workers for WSGI. 
  workers: !!int 4

redis:
  bind:
    ip: !!str "localhost"
    port: !!int 6379